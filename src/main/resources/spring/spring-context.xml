<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-3.1.xsd
         http://www.springframework.org/schema/mvc
         http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
         http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
        http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

    <!-- 自动扫描 -->
    <context:component-scan base-package="cn.canlnac.course"/>

    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath:jdbc.properties" />

    <!-- 配置数据源 ，dbcp -->
    <bean name="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"></property>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${maxActive}"></property>
        <!-- 连接池最大空闲 -->
        <!--<property name="maxIdle" value="${maxIdle}"></property>-->
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"></property>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}"></property>
    </bean>

    <!-- sqlSessinFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 加载mybatis的配置文件 -->
        <property name="configLocation" value="classpath:mybatis/Configuration.xml" />
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- mapper批量扫描，从mapper包中扫描出mapper接口，自动创建代理对象并且在spring容器中注册
	遵循规范：将mapper.java和mapper.xml映射文件名称保持一致，且在一个目录 中
	自动扫描出来的mapper的bean的id为mapper类名（首字母小写）
	-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.canlnac.course.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>



    <!--**************************以下为事务声明管理*************************************************-->
    <!-- 事务管理器  对mybatis操作数据库事务控制，spring使用jdbc的事务控制类 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- 通知 -->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
        <!--<tx:attributes>-->
            <!--&lt;!&ndash; 传播行为 &ndash;&gt;-->
            <!--&lt;!&ndash;<tx:method name="save*" propagation="REQUIRED"/>&ndash;&gt;-->
            <!--&lt;!&ndash;<tx:method name="delete*" propagation="REQUIRED"/>&ndash;&gt;-->
            <!--&lt;!&ndash;<tx:method name="insert*" propagation="REQUIRED"/>&ndash;&gt;-->
            <!--&lt;!&ndash;<tx:method name="update*" propagation="REQUIRED"/>&ndash;&gt;-->
            <!--&lt;!&ndash;<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>&ndash;&gt;-->
            <!--&lt;!&ndash;<tx:method name="get*" propagation="SUPPORTS" read-only="true"/>&ndash;&gt;-->
            <!--&lt;!&ndash;<tx:method name="select*" propagation="SUPPORTS" read-only="true"/>&ndash;&gt;-->
            <!--<tx:method name="find*" read-only="false"/>-->
            <!--<tx:method name="add*" rollback-for="Exception"/>-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->
    <!--&lt;!&ndash; aop &ndash;&gt;-->
    <!--<aop:config>-->
        <!--<aop:advisor advice-ref="txAdvice" pointcut="execution(* cn.canlnac.course.service.*.*(..))"/>-->
        <!--&lt;!&ndash;<aop:pointcut id="serviceMethod" expression="execution(* cn.canlnac.course.service.*.*(..))"/>&ndash;&gt;-->
        <!--&lt;!&ndash;<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice"/>&ndash;&gt;-->
    <!--</aop:config>-->
</beans>